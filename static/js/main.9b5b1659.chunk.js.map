{"version":3,"sources":["components/CityContext.js","components/ApiContext.js","components/home/DailyWeather.js","components/Toast.js","components/home/WeatherStrip.js","components/favorite/FavoriteCityDetails.js","components/home/HomePage.js","components/Navbar.js","components/favorite/FavoriteCard.js","components/favorite/Favorite.js","components/home/Search.js","App.js","serviceWorker.js","index.js"],"names":["CityContext","React","createContext","CityProvider","props","useState","cityContext","setCityContext","Provider","value","children","ApiContext","ApiProvider","apiContext","setApiContext","DailyWeather","dailyForecast","presentFahrenheit","day","setDay","daysInWeek","useEffect","Date","getDay","className","src","Day","Icon","Math","round","Temperature","Minimum","Value","Maximum","Toast","error","resetError","customId","toast","toastId","position","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","fontSize","onClose","autoClose","newestOnTop","rtl","pauseOnFocusLoss","WeatherStrip","cityWeather","fiveDaysWeather","setFiveDaysWeather","expended","setExpended","isFavorite","setIsFavorite","errorMessage","setErrorMessage","useContext","fiveDaysForecasts","a","forecasts","locationKey","query","fetch","response","json","data","storedFavoriteCities","localStorage","getItem","JSON","parse","cityName","setItem","stringify","onClick","WeatherIcon","WeatherText","Imperial","Metric","length","DailyForecasts","map","key","FavoriteCityDetails","IsDayTime","HomePage","searchString","allCitiesWeather","setAllCitiesWeather","setPresentFahrenheit","getCities","userInput","Promise","all","city","getCurrentWeather","Key","LocalizedName","allCitiesCurrentWeather","locationName","currentLocation","Form","Check","type","id","label","onChange","event","target","checked","apiKey","TopNavbar","isFavoritePageActive","setIsFavoritePageActive","window","location","href","includes","Navbar","bg","variant","Nav","Link","inline","FavoriteCard","cityWeatherInfo","Card","Body","Title","Img","Text","to","Favorite","favoriteCities","Object","entries","push","Search","input","setInput","specifySearch","verifyInput","match","FormControl","placeholder","App","setSearchString","exact","path","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9b5b1659.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nconst CityContext = React.createContext([{}, () => {}])\r\n\r\nconst CityProvider = (props) => {\r\n\tconst [cityContext, setCityContext] = useState('')\r\n\r\n\treturn (\r\n\t\t<CityContext.Provider value={[cityContext, setCityContext]}>\r\n\t\t\t{props.children}\r\n\t\t</CityContext.Provider>\r\n\t)\r\n}\r\n\r\nexport {CityContext, CityProvider}","import React, {useState} from 'react'\r\n\r\nconst ApiContext = React.createContext([{}, () => {}])\r\n\r\nconst ApiProvider = (props) => {\r\n\tconst [apiContext, setApiContext] = useState('')\r\n\r\n\treturn (\r\n\t\t<ApiContext.Provider value={[apiContext, setApiContext]}>\r\n\t\t\t{props.children}\r\n\t\t</ApiContext.Provider>\r\n\t)\r\n}\r\n\r\nexport {ApiContext, ApiProvider}","import React, { useState, useEffect } from 'react'\r\n\r\nconst DailyWeather = ({ dailyForecast, presentFahrenheit }) => {\r\n    const [day, setDay] = useState([])\r\n    const daysInWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n\r\n    useEffect(() => {\r\n        const date = new Date(dailyForecast.Date)\r\n        const day = date.getDay()\r\n        setDay(daysInWeek[day])\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"one-day-container\" >\r\n            <img src={`../images/weather-icons/${dailyForecast.Day.Icon}.svg`} className=\"one-day-temp-logo\" />\r\n            <div className='min-max-temp'>\r\n                <div>{Math.round(dailyForecast.Temperature.Minimum.Value)}&deg;{presentFahrenheit ? 'F' : 'C'} -</div>\r\n                <div>&nbsp;{Math.round(dailyForecast.Temperature.Maximum.Value)}&deg;{presentFahrenheit ? 'F' : 'C'}</div>\r\n            </div>\r\n            <div>{day}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DailyWeather","import React, {useEffect} from 'react'\r\n\r\nimport {ToastContainer, toast} from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nexport default function Toast({error, resetError}) {\r\n\tconst customId = error\r\n\r\n\tuseEffect(() => {\r\n\t\tif (error) {\r\n\t\t\ttoast(`${error}`, {\r\n\t\t\t\ttoastId: customId,\r\n\t\t\t\tposition: 'bottom-center',\r\n\t\t\t\thideProgressBar: true,\r\n\t\t\t\tcloseOnClick: true,\r\n\t\t\t\tpauseOnHover: true,\r\n\t\t\t\tdraggable: false,\r\n\t\t\t\tprogress: undefined,\r\n\t\t\t\tfontSize: 10,\r\n\t\t\t\tonClose: () => {resetError('')}\r\n\t\t\t})\r\n\t\t}\r\n\t}, [error])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{(error) &&\r\n\t\t\t<ToastContainer\r\n\t\t\t\tposition=\"bottom-center\"\r\n\t\t\t\tautoClose={3000}\r\n\t\t\t\thideProgressBar={true}\r\n\t\t\t\tnewestOnTop={true}\r\n\t\t\t\tcloseOnClick\r\n\t\t\t\trtl={false}\r\n\t\t\t\tpauseOnFocusLoss\r\n\t\t\t\tdraggable={false}\r\n\t\t\t\tpauseOnHover\r\n\t\t\t/>}\r\n\t\t</div >\r\n\t)\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { ApiContext } from '../ApiContext'\r\nimport DailyWeather from './DailyWeather'\r\nimport Toast from '../Toast'\r\n\r\nconst WeatherStrip = ({ cityWeather, presentFahrenheit }) => {\r\n    const [fiveDaysWeather, setFiveDaysWeather] = useState([])\r\n    const [expended, setExpended] = useState(false)\r\n    const [isFavorite, setIsFavorite] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [apiContext, setApiContext] = React.useContext(ApiContext)\r\n\r\n    const fiveDaysForecasts = async () => {\r\n        try {\r\n            const forecasts = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityWeather.locationKey}`\r\n            const query = `?apikey=${apiContext}&q=en-us&metric=${!presentFahrenheit}`\r\n            const response = await fetch(forecasts + query)\r\n            const data = await response.json()\r\n\r\n            setFiveDaysWeather(data)\r\n\r\n        } catch (err) {\r\n            setErrorMessage('Cannot fetch because Api limitation')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (expended) {\r\n            fiveDaysForecasts()\r\n        }\r\n    }, [expended, presentFahrenheit])\r\n\r\n    useEffect(() => {\r\n        if (isFavorite) {\r\n            let storedFavoriteCities = localStorage.getItem('storedFavoriteCities')\r\n            storedFavoriteCities = storedFavoriteCities ? JSON.parse(storedFavoriteCities) : {}\r\n            storedFavoriteCities[`${cityWeather.cityName}`] = cityWeather\r\n            localStorage.setItem('storedFavoriteCities', JSON.stringify(storedFavoriteCities))\r\n        } else {\r\n            let storedFavoriteCities = localStorage.getItem('storedFavoriteCities')\r\n            storedFavoriteCities = storedFavoriteCities ? JSON.parse(storedFavoriteCities) : {}\r\n            delete storedFavoriteCities[`${cityWeather.cityName}`]\r\n            localStorage.setItem('storedFavoriteCities', JSON.stringify(storedFavoriteCities))\r\n        }\r\n    }, [isFavorite])\r\n\r\n    const favorite = () => {\r\n        setIsFavorite(isFavorite ? false : true)\r\n    }\r\n\r\n    const hendleOnClick = () => {\r\n        setExpended(expended ? false : true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"weather-strip-container\">\r\n                <div className=\"weather-strip\" onClick={() => hendleOnClick()} >\r\n                    <div className=\"weather-info-container\">\r\n                        < div>{cityWeather.cityName}</ div>\r\n                        <div className=\"flex\">\r\n                            <img src={`../images/weather-icons/${cityWeather.WeatherIcon}.svg`} className=\"temp-logos\" />\r\n                            <div>{cityWeather.WeatherText}</div>\r\n                        </div>\r\n                        {presentFahrenheit ?\r\n                            <div>{Math.round(cityWeather.Temperature.Imperial.Value)}&deg;F</div> :\r\n                            <div>{Math.round(cityWeather.Temperature.Metric.Value)}&deg;C</div>\r\n                        }\r\n                    </div>\r\n\r\n                    < div className=\"five-days-container\" >\r\n                        {(fiveDaysWeather.length != 0 && expended) && fiveDaysWeather.DailyForecasts.map((dailyForecast) => (\r\n                            <DailyWeather key={dailyForecast.Date} dailyForecast={dailyForecast} presentFahrenheit={presentFahrenheit} />\r\n                        ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <img src={isFavorite ? `../images/yellow-star.png` : `../images/star.png`} className=\"favorite-logo\" onClick={() => favorite()} />\r\n            </div>\r\n            {errorMessage && <Toast error={errorMessage} resetError={setErrorMessage} />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherStrip","import React, { useEffect, useState } from 'react'\r\nimport { ApiContext } from '../ApiContext'\r\nimport { CityContext } from '../CityContext'\r\nimport DailyWeather from '../home/DailyWeather'\r\nimport Toast from '../Toast'\r\n\r\nconst FavoriteCityDetails = ({ presentFahrenheit }) => {\r\n    const [cityContext, setCityContext] = React.useContext(CityContext)\r\n    const [fiveDaysWeather, setFiveDaysWeather] = useState([])\r\n    const [apiContext, setApiContext] = React.useContext(ApiContext)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [isFavorite, setIsFavorite] = useState(true)\r\n\r\n    useEffect(() => {\r\n        fiveDaysForecasts()\r\n    }, [presentFahrenheit, apiContext])\r\n\r\n    const fiveDaysForecasts = async () => {\r\n        try {\r\n            const forecasts = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityContext.locationKey}`\r\n            const query = `?apikey=${apiContext}&q=en-us&metric=${!presentFahrenheit}`\r\n            const response = await fetch(forecasts + query)\r\n            const data = await response.json()\r\n\r\n            setFiveDaysWeather(data)\r\n\r\n        } catch (err) { }\r\n    }\r\n\r\n    const favorite = () => {\r\n        setIsFavorite(isFavorite ? false : true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isFavorite) {\r\n            let storedFavoriteCities = localStorage.getItem('storedFavoriteCities')\r\n            storedFavoriteCities = storedFavoriteCities ? JSON.parse(storedFavoriteCities) : {}\r\n            storedFavoriteCities[`${cityContext.cityName}`] = cityContext\r\n            localStorage.setItem('storedFavoriteCities', JSON.stringify(storedFavoriteCities))\r\n        }\r\n        else {\r\n            let storedFavoriteCities = localStorage.getItem('storedFavoriteCities')\r\n            storedFavoriteCities = storedFavoriteCities ? JSON.parse(storedFavoriteCities) : {}\r\n            delete storedFavoriteCities[`${cityContext.cityName}`]\r\n            localStorage.setItem('storedFavoriteCities', JSON.stringify(storedFavoriteCities))\r\n        }\r\n    }, [isFavorite])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"favorite-city-details-card\">\r\n                <div className=\"favorite-city-details-image-continer\">\r\n                    <img src={cityContext.IsDayTime ? '../images/day.gif' : '../images/night.gif'} className=\"day-night\" />\r\n                    <img src={isFavorite ? `../images/yellow-star.png` : `../images/star.png`} className=\"star\" onClick={() => favorite()} />\r\n                </div>\r\n                <div className=\"favorite-city-details-header\">\r\n                    <h2>{cityContext.cityName}</h2>\r\n                    <img src={`../images/weather-icons/${cityContext.WeatherIcon}.svg`} className=\"temp-favorite-logo\" />\r\n                </div>\r\n\r\n                {presentFahrenheit ?\r\n                    <h4>{Math.round(cityContext.Temperature.Imperial.Value)}&deg;F</h4> :\r\n                    <h4>{Math.round(cityContext.Temperature.Metric.Value)}&deg;C</h4>\r\n                }\r\n\r\n                < div className=\"five-days-container\" >\r\n                    {(fiveDaysWeather.length != 0) && fiveDaysWeather.DailyForecasts.map((dailyForecast) => (\r\n                        <DailyWeather key={dailyForecast.Date} dailyForecast={dailyForecast} presentFahrenheit={presentFahrenheit} />\r\n                    ))\r\n                    }\r\n                </div>\r\n            </div>\r\n            {errorMessage && <Toast error={errorMessage} resetError={setErrorMessage} />}\r\n\r\n            {/* } */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FavoriteCityDetails","import React, { useState, useEffect } from 'react'\r\nimport { Form } from 'react-bootstrap'\r\nimport { CityContext } from '../CityContext'\r\nimport { ApiContext } from '../ApiContext'\r\nimport WeatherStrip from './WeatherStrip'\r\nimport FavoriteCityDetails from '../favorite/FavoriteCityDetails'\r\nimport Toast from '../Toast'\r\n\r\nconst HomePage = ({ searchString }) => {\r\n    const [allCitiesWeather, setAllCitiesWeather] = useState([])\r\n    const [presentFahrenheit, setPresentFahrenheit] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [cityContext, setCityContext] = React.useContext(CityContext)\r\n    const [apiContext, setApiContext] = React.useContext(ApiContext)\r\n\r\n\r\n    useEffect(() => {\r\n        setApiContext('GMoWNwfed4lsIH3Lm7ZhdFE3efyaXpVm')\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (searchString.length >= 1) {\r\n            getCities(searchString)\r\n        }\r\n    }, [searchString])\r\n\r\n    const getCities = async (userInput) => {\r\n        try {\r\n            const cities = 'http://dataservice.accuweather.com/locations/v1/cities/autocomplete'\r\n            const query = `?apikey=${apiContext}&q=${userInput}`\r\n            const response = await fetch(cities + query)\r\n            const data = await response.json()\r\n\r\n            let allCitiesCurrentWeather = await Promise.all(data.map(async city => {\r\n                return await getCurrentWeather(city.Key, city.LocalizedName)\r\n\r\n            }))\r\n\r\n            setAllCitiesWeather(allCitiesCurrentWeather)\r\n\r\n        } catch (err) {\r\n            setErrorMessage('Cannot fetch because Api limitation')\r\n        }\r\n    }\r\n\r\n    const getCurrentWeather = async (locationKey, locationName) => {\r\n        try {\r\n            const currentLocation = `http://dataservice.accuweather.com/currentconditions/v1/${locationKey}`\r\n            const query = `?apikey=${apiContext}&language=en-us`\r\n            const response = await fetch(currentLocation + query)\r\n            const data = await response.json()\r\n            data[0].cityName = locationName\r\n            data[0].locationKey = locationKey\r\n            return data\r\n\r\n        } catch (err) {\r\n            setErrorMessage('Cannot fetch because Api limitation')\r\n        }\r\n    }\r\n\r\n    const switchToFahrenheit = (event) => {\r\n        setPresentFahrenheit(event.target.checked)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form className=\"switch-to-fahrenheit-continer\">\r\n                <Form.Check\r\n                    type=\"switch\"\r\n                    id=\"custom-switch\"\r\n                    label=\"Switch To Fahrenheit\"\r\n                    onChange={switchToFahrenheit}\r\n                />\r\n            </Form>\r\n\r\n            {/* {(allCitiesInfo && !cityContext) && */}\r\n            {!cityContext &&\r\n                <div className=\"location-card\">\r\n                    {allCitiesWeather.map((cityWeather) => (\r\n                        <>\r\n                            {cityWeather &&\r\n                                <WeatherStrip\r\n                                    key={cityWeather[0].locationKey}\r\n                                    cityWeather={cityWeather[0]}\r\n                                    presentFahrenheit={presentFahrenheit}\r\n                                    apiKey={apiContext} />\r\n                            }\r\n                        </>\r\n                    ))}\r\n                </div>\r\n            }\r\n            {cityContext && <FavoriteCityDetails presentFahrenheit={presentFahrenheit} />}\r\n            {errorMessage && <Toast error={errorMessage} resetError={setErrorMessage} />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HomePage","import React, { useState, useEffect } from 'react'\r\nimport { Navbar, Nav, Form } from 'react-bootstrap'\r\n\r\nconst TopNavbar = () => {\r\n    const [isFavoritePageActive, setIsFavoritePageActive] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (window.location.href.includes(\"favorite\")) {\r\n            setIsFavoritePageActive(true)\r\n        } \r\n        else {\r\n            setIsFavoritePageActive(false)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"/\" className={isFavoritePageActive ? null : \"active\"}>\r\n                    <img src={isFavoritePageActive ? `./images/house.png` : `./images/red-house.png`} className=\"nav-logos\" />\r\n                    Home\r\n                </Nav.Link>\r\n\r\n                <Nav.Link href=\"/favorite\" className={isFavoritePageActive ? \"active\" : null}>\r\n                    <img src={isFavoritePageActive ? `./images/yellow-star.png` : `./images/star.png`} className=\"nav-logos\" />\r\n                Favorite\r\n                </Nav.Link>\r\n            </Nav>\r\n\r\n            <Form inline>\r\n                <img className=\"herolo-logo\" src=\"./images/herolo.png\" />\r\n            </Form>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default TopNavbar","import React, { useState, useEffect } from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { CityContext } from '../CityContext'\r\n\r\nconst FavoriteCard = ({ cityName, cityWeatherInfo }) => {\r\n    const [isFavorite, setIsFavorite] = useState(true)\r\n    const [cityContext, setCityContext] = React.useContext(CityContext)\r\n\r\n    const favorite = () => {\r\n        setIsFavorite(isFavorite ? false : true)\r\n    }\r\n\r\n    const goToMainPage = () => {\r\n        setCityContext(cityWeatherInfo)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCityContext('')\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!isFavorite) {\r\n            let storedFavoriteCities = localStorage.getItem('storedFavoriteCities')\r\n            storedFavoriteCities = storedFavoriteCities ? JSON.parse(storedFavoriteCities) : {}\r\n            delete storedFavoriteCities[`${cityName}`]\r\n            localStorage.setItem('storedFavoriteCities', JSON.stringify(storedFavoriteCities))\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {isFavorite &&\r\n                <Card className=\"card-container\">\r\n                    <img src={isFavorite ? `../images/yellow-star.png` : `../images/star.png`} className=\"favorite-logo-in-card\" onClick={() => favorite()} />\r\n                    <Card.Body>\r\n                        <Card.Title>{cityName}</Card.Title>\r\n                        <Card.Img variant=\"top\" src={`../images/weather-icons/${cityWeatherInfo.WeatherIcon}.svg`} className=\"favorite-temp-logos\" />\r\n                        <Card.Text>{Math.round(cityWeatherInfo.Temperature.Metric.Value)}&deg;C</Card.Text>\r\n                        <Link to=\"/\" onClick={() => goToMainPage()}>See Forcast</Link>\r\n                    </Card.Body>\r\n                </Card >\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FavoriteCard","import React from 'react'\r\nimport FavoriteCard from './FavoriteCard'\r\n\r\nconst Favorite = () => {\r\n    const favoriteCities = []\r\n    let storedFavoriteCities = localStorage.getItem('storedFavoriteCities')\r\n    storedFavoriteCities = storedFavoriteCities ? JSON.parse(storedFavoriteCities) : {}\r\n\r\n    for (const [key, value] of Object.entries(storedFavoriteCities)) {\r\n        favoriteCities.push(\r\n            <FavoriteCard key={key} cityName={key} cityWeatherInfo={value} />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"favorite-container\">\r\n            {favoriteCities}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Favorite","import React, { useState, useEffect } from 'react'\r\nimport { Button, FormControl } from 'react-bootstrap'\r\nimport { CityContext } from '../CityContext'\r\nimport Toast from '../Toast'\r\n\r\nconst Search = (props) => {\r\n    const [input, setInput] = useState('tel aviv')\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [cityContext, setCityContext] = React.useContext(CityContext)\r\n\r\n    const handleChange = (event) => {\r\n        setCityContext('')\r\n        if (verifyInput(event.target.value)) {\r\n            setInput(event.target.value)\r\n        } else {\r\n            setErrorMessage('Invalid Character')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.specifySearch(input)\r\n    }, [input])\r\n\r\n    const verifyInput = (input) => {\r\n        const acceptedCharacters = /^[A-Za-z\\s]+$/\r\n        if (input.match(acceptedCharacters) || !input) {\r\n            return true\r\n        }\r\n        else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"search-container\">\r\n                <FormControl type=\"text\" placeholder=\"Search\" value={input} className=\"search-field\" onChange={handleChange} />\r\n                <img src={'../images/magnifying-glass.png'} className=\"magnifying-glass\" />\r\n            </div>\r\n            {errorMessage && <Toast error={errorMessage} resetError={setErrorMessage} />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Search","import React, { useState } from 'react'\r\nimport { Switch, Route } from \"react-router-dom\"\r\nimport './style.css'\r\nimport HomePage from './components/home/HomePage'\r\nimport TopNavbar from './components/Navbar.js'\r\nimport Favorite from './components/favorite/Favorite'\r\nimport Search from './components/home/Search'\r\nimport { CityProvider } from './components/CityContext'\r\nimport { ApiProvider } from './components/ApiContext'\r\n\r\n\r\nfunction App() {\r\n  const [searchString, setSearchString] = useState('')\r\n\r\n  const specifySearch = (userInput) => {\r\n    setSearchString(userInput)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <TopNavbar />\r\n      <Switch>\r\n        <CityProvider>\r\n          <ApiProvider>\r\n            <Route exact path=\"/\">\r\n              <Search specifySearch={specifySearch} />\r\n              <HomePage searchString={searchString} />\r\n            </Route>\r\n            <Route exact path=\"/favorite\">\r\n              <Favorite />\r\n            </Route>\r\n          </ApiProvider>\r\n        </CityProvider>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}